1. Length of Objects: 
   Use .length() for strings
   Use .length for arrays
   Use .size() for collections

2. Boolean Operations: 
   || is used for logical OR, && for logical AND.

3. HashMaps (Key-Value Maps): 
   Declare a HashMap using HashMap<KeyType, ValueType>.
   Use .put() to insert key-value pairs.
   Use .getOrDefault() to retrieve a value with a default option.

4. HashSet (Sets): 
   Declare a HashSet using HashSet<Type>.
   HashSet<Integer> numSet = new HashSet<Integer>();
   Use .get() to access
   Use .put() to add an element.
   Use .remove() to remove an element.
   Use .containsKey() to check if an element exists.

5. ArrayList (Dynamic Arrays): 
   Declare an ArrayList using ArrayList<Type>.
   Use ArrayList<> instead of List<> to instantiate an object.
   EX: return new ArrayList<>(anagram_groups.values()); // Works
   NOTTT return new List <>(anagram_groups.values()); // FAILS!
   
   Instantiate an empty list: new ArrayList<>()
   List<String> strs = new ArrayList<>();
   Use .get(index) to get an element in the list
   Use .add() to append elements.
   Use .remove(index) to remove an element.

6. Sorting: 
   Use Collections.sort() to sort an ArrayList in place.
   Sort a string:
   char[] c = str.toCharArray();
   Arrays.sort(c);
   String sorted_str = new String(c);

7. Strings and StringBuilder
   Access a char in a string
   myString.charAt(i)

   StringBuilder strBuilder = new StringBuilder();
   for (String str : strs) {
            strBuilder.append(s).append("\n");
   }
   return strBuilder.toString();
   subStrBuilder.setLength(0); 
   Same As
   subStrBuilder = new StringBuilder();

8. Arrays
   int[] output = new int[length];

9. char validation

char c = 'A';
int unicode = (int) c; // ord() equivalent
System.out.println(unicode); // Outputs 65

int codePoint = 65;
char c = (char) codePoint; // chr() equivalent
System.out.println(c); // Outputs 'A'

10. You cannot return ONLY in a conditional, you must return outside of the condition as well.

